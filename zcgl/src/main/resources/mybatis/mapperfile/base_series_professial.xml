<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="confing/mappers.base_series_professial">
  <resultMap id="BaseResultMap" type="com.hz.demo.model.base_series_professial">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    <id column="ID" jdbcType="DECIMAL" property="id" />
    <result column="REVIEW_SERIES" jdbcType="VARCHAR" property="reviewSeries" />
    <result column="PROFESSIAL_CODE" jdbcType="VARCHAR" property="professialCode" />
    <result column="BACK1" jdbcType="VARCHAR" property="back1" />
    <result column="BACK2" jdbcType="VARCHAR" property="back2" />
    <result column="BACK3" jdbcType="VARCHAR" property="back3" />
    <result column="PROFESSIAL_NAME" jdbcType="VARCHAR" property="professialName" />
    <result column="STATE" jdbcType="DECIMAL" property="state" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    ID, REVIEW_SERIES, PROFESSIAL_CODE, BACK1, BACK2, BACK3, PROFESSIAL_NAME, STATE
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    select
    <include refid="Base_Column_List" />
    from BASE_SERIES_PROFESSIAL
    where ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    delete from BASE_SERIES_PROFESSIAL
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <insert id="insert" parameterType="com.hz.demo.model.base_series_professial">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    insert into BASE_SERIES_PROFESSIAL (ID, REVIEW_SERIES, PROFESSIAL_CODE,
    BACK1, BACK2, BACK3,
    PROFESSIAL_NAME, STATE)
    values (#{id,jdbcType=DECIMAL}, #{reviewSeries,jdbcType=VARCHAR}, #{professialCode,jdbcType=VARCHAR},
    #{back1,jdbcType=VARCHAR}, #{back2,jdbcType=VARCHAR}, #{back3,jdbcType=VARCHAR},
    #{professialName,jdbcType=VARCHAR}, #{state,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.hz.demo.model.base_series_professial">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    insert into BASE_SERIES_PROFESSIAL
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="reviewSeries != null">
        REVIEW_SERIES,
      </if>
      <if test="professialCode != null">
        PROFESSIAL_CODE,
      </if>
      <if test="back1 != null">
        BACK1,
      </if>
      <if test="back2 != null">
        BACK2,
      </if>
      <if test="back3 != null">
        BACK3,
      </if>
      <if test="professialName != null">
        PROFESSIAL_NAME,
      </if>
      <if test="state != null">
        STATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="reviewSeries != null">
        #{reviewSeries,jdbcType=VARCHAR},
      </if>
      <if test="professialCode != null">
        #{professialCode,jdbcType=VARCHAR},
      </if>
      <if test="back1 != null">
        #{back1,jdbcType=VARCHAR},
      </if>
      <if test="back2 != null">
        #{back2,jdbcType=VARCHAR},
      </if>
      <if test="back3 != null">
        #{back3,jdbcType=VARCHAR},
      </if>
      <if test="professialName != null">
        #{professialName,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hz.demo.model.base_series_professial">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    update BASE_SERIES_PROFESSIAL
    <set>
      <if test="reviewSeries != null">
        REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR},
      </if>
      <if test="professialCode != null">
        PROFESSIAL_CODE = #{professialCode,jdbcType=VARCHAR},
      </if>
      <if test="back1 != null">
        BACK1 = #{back1,jdbcType=VARCHAR},
      </if>
      <if test="back2 != null">
        BACK2 = #{back2,jdbcType=VARCHAR},
      </if>
      <if test="back3 != null">
        BACK3 = #{back3,jdbcType=VARCHAR},
      </if>
      <if test="professialName != null">
        PROFESSIAL_NAME = #{professialName,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        STATE = #{state,jdbcType=DECIMAL},
      </if>
    </set>
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hz.demo.model.base_series_professial">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 29 11:19:37 CST 2018.
    -->
    update BASE_SERIES_PROFESSIAL
    set REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR},
    PROFESSIAL_CODE = #{professialCode,jdbcType=VARCHAR},
    BACK1 = #{back1,jdbcType=VARCHAR},
    BACK2 = #{back2,jdbcType=VARCHAR},
    BACK3 = #{back3,jdbcType=VARCHAR},
    PROFESSIAL_NAME = #{professialName,jdbcType=VARCHAR},
    STATE = #{state,jdbcType=DECIMAL}
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <select id="selectList" parameterType="pd" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from
    (select rownum rn,a.* from
    (select
    <include refid="Base_Column_List"/>
    from BASE_SERIES_PROFESSIAL WHERE 1=1
    <if test="reviewSeries != null and reviewSeries!='' ">
      and REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
    </if>) a
    <if test="page != null and rows != null">
      where rownum &lt;=#{rows}*#{page}) b
      where  rn>(#{page}-1)*#{rows}
    </if>
  </select>
 <!--根据条件查询全部记录个数-->
<select id="selectCount" parameterType="pd" resultType="Integer">
select count(*) as listcount
from BASE_SERIES_PROFESSIAL WHERE
  1=1
  <if test="reviewSeries != null and reviewSeries!='' ">
    and REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
  </if>
</select>
<select id="selectListName" parameterType="pd" resultMap="BaseResultMap">
  SELECT <include refid="Base_Column_List"/>  from  BASE_SERIES_PROFESSIAL where   1=1
  <if test="reviewSeries != null and reviewSeries!='' ">
    and REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
  </if>
  <if test="professialCode != null and professialCode!='' ">
    and PROFESSIAL_CODE = #{professialCode,jdbcType=VARCHAR}
  </if>
  <if test="professialName != null and professialName!='' ">
    and PROFESSIAL_NAME = #{professialName,jdbcType=VARCHAR}
  </if>
  <if test="id != null and id!=''">
    and ID != #{id}
  </if>
</select>


  <!--根据评审系列查询该系列所有绑定的专业-->
  <select id="getRevProByRevSer" parameterType="pd" resultMap="BaseResultMap">
    select  <include refid="Base_Column_List"/> from BASE_SERIES_PROFESSIAL
    where 1 = 1
    <if test="reviewSeries != null and reviewSeries!=''">
      and REVIEW_SERIES = #{reviewSeries}
    </if>
  </select>
  <!--根据评审系列查询该系列所有绑定的专业(排除小组中已存在的)-->
  <select id="getRevProByRevSer1" parameterType="pd" resultMap="BaseResultMap">
    select  <include refid="Base_Column_List"/> from BASE_SERIES_PROFESSIAL where REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
  </select>
  <!--<select id="getBingList" parameterType="pd" resultType="Map">
    SELECT a.PROFESSIAL_CODE as id,b.PROFESSIAL_NAME as text,b.PROFESSIAL_PARENTCODE as pid from
    (select * from BASE_SERIES_PROFESSIAL where REVIEW_SERIES=#{reviewSeries,jdbcType=VARCHAR}) a  left join base_professial b on a.REVIEW_PROFESSIAL = b.PROFESSIAL_CODE
    union
    select PROFESSIAL_CODE as id, PROFESSIAL_NAME as text,PROFESSIAL_PARENTCODE as pid from BASE_PROFESSIAL where PROFESSIAL_CODE in(
    SELECT b.PROFESSIAL_PARENTCODE as pid from
    (select * from BASE_SERIES_PROFESSIAL where REVIEW_SERIES=#{reviewSeries,jdbcType=VARCHAR}) a  left join base_professial b on a.REVIEW_PROFESSIAL = b.PROFESSIAL_CODE)
  </select>-->
  <!--根据评审系列查询该系列所有绑定的专业树-->
  <select id="getBingList" parameterType="pd" resultType="Map">
    select REVIEW_SERIES as pid,professial_code as id,professial_name as text from BASE_SERIES_PROFESSIAL
    where REVIEW_SERIES =#{reviewSeries,jdbcType=VARCHAR}
    union
    select distinct t2.PARENT_ID as pid,t1.REVIEW_SERIES as id,t2.dict_name as text from BASE_SERIES_PROFESSIAL t1
    left join sys_dict t2 on t1.REVIEW_SERIES = t2.dict_code and t2.GROUP_NAME ='REVIEW_SERIES'
    where REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
  </select>

  <!--根据专业编码获取专业数据-->
  <select id="getProfeWhere" parameterType="pd" resultMap="BaseResultMap">
    select  <include refid="Base_Column_List"/> from BASE_SERIES_PROFESSIAL where 1 = 1
    <if test="professialCode != null and professialCode!='' ">
      and PROFESSIAL_CODE = #{professialCode}
    </if>

  </select>


  <!--根据条件获取专业集合 下拉列表 排除已存在的专业-->
  <select id="getProfessialByGroup" parameterType="pd" resultType="pd">
     select bsp.* from BASE_SERIES_PROFESSIAL bsp
    LEFT JOIN BASE_JUDGING_SERIES bjs on bjs.REVIEW_PROFESSIAL=bsp.PROFESSIAL_CODE
    where bjs.JUDGING_CODE=#{JUDGING_CODE}
   <if test="professial_id!='' and professial_id!=null">
     and bsp.PROFESSIAL_CODE not in (
     <foreach collection="professial_id.split(',')" item="classIdList"  separator="," >
       #{classIdList}
     </foreach>
     )
   </if>
  </select>
  <select id="selectProfessialByJudging" parameterType="pd" resultType="pd">
      select professial_id from BASE_SUBJECT_GROUP where JUDGING_CODE=#{JUDGING_CODE}
      <if test="id!='' and id!=null">
        and id!=#{id}
      </if>
  </select>

</mapper>