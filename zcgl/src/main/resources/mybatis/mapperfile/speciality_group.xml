<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="confing/mappers.speciality_group">
  <resultMap id="BaseResultMap" type="com.hz.demo.model.speciality_group">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="GROUP_ID" jdbcType="VARCHAR" property="groupId" />
    <result column="SPECIALITY_ID" jdbcType="VARCHAR" property="specialityId" />
    <result column="BACK1" jdbcType="VARCHAR" property="back1" />
    <result column="BACK2" jdbcType="VARCHAR" property="back2" />
    <result column="BACK3" jdbcType="VARCHAR" property="back3" />
    <association property="subjectGroup" javaType="com.hz.demo.model.subject_group">
      <id column="ID" jdbcType="INTEGER" property="id" />
      <result column="JUDGING_CODE" jdbcType="VARCHAR" property="judgingCode" />
      <result column="GROUP_NO" jdbcType="VARCHAR" property="groupNo" />
      <result column="GROUP_NAME" jdbcType="VARCHAR" property="groupName" />
      <result column="YEAR_NO" jdbcType="VARCHAR" property="yearNo" />
      <result column="GROUP_LEADER" jdbcType="VARCHAR" property="groupLeader" />
      <result column="PROFESSIAL_ID" jdbcType="VARCHAR" property="professialId" />
    </association>
  </resultMap>

  <resultMap id="BaseResultMap1" type="com.hz.demo.model.base_speciality">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
      <id column="ID" jdbcType="INTEGER" property="id" />
      <result column="PERSONAL_NUMBER" jdbcType="VARCHAR" property="personalNumber" />
      <result column="ADMINISTRATIVE_DUTY_LEVEL" jdbcType="VARCHAR" property="administrativeDutyLevel" />
      <result column="PROFESSIAL_DUTY_NAME" jdbcType="VARCHAR" property="professialDutyLevel" />
      <result column="PROFESSIAL_LEVEL_NAME" jdbcType="VARCHAR" property="professialLevel" />
      <result column="PROFESSIAL" jdbcType="VARCHAR" property="professial" />
      <result column="JOB_YEAR" jdbcType="VARCHAR" property="jobYear" />
      <result column="PERFORMANCE" jdbcType="VARCHAR" property="performance" />
      <result column="EDUCATION" jdbcType="VARCHAR" property="education" />
      <result column="DEGREE" jdbcType="VARCHAR" property="degree" />
      <result column="NOWUNIT" jdbcType="VARCHAR" property="nowunit" />
      <result column="AREACODE" jdbcType="VARCHAR" property="areacode" />
      <result column="SPECIALITY_NAME" jdbcType="VARCHAR" property="specialityName" />
      <result column="SEX" jdbcType="VARCHAR" property="sex" />
      <result column="ID_CARD_NO" jdbcType="VARCHAR" property="idCardNo" />
      <result column="BIRTHDATE" jdbcType="TIMESTAMP" property="birthdate" />
      <result column="GRADUATE_SCHOOL" jdbcType="VARCHAR" property="graduateSchool" />
      <result column="GRADUATE_DATE" jdbcType="TIMESTAMP" property="graduateDate" />
      <result column="MOBILEPHONE" jdbcType="VARCHAR" property="mobilephone" />
      <result column="TEL" jdbcType="VARCHAR" property="tel" />
      <result column="POSTAL_ADDRESS" jdbcType="VARCHAR" property="postalAddress" />
      <result column="POSTAL_CODE" jdbcType="VARCHAR" property="postalCode" />
      <result column="EMAIL" jdbcType="VARCHAR" property="email" />
      <result column="PRESENTATION" jdbcType="VARCHAR" property="presentation" />
      <result column="ADDTIME" jdbcType="TIMESTAMP" property="addtime" />
      <result column="ADDUSERID" jdbcType="VARCHAR" property="adduserid" />
      <result column="GROUP_LEADER" jdbcType="VARCHAR" property="back1" />
      <result column="TYPE" jdbcType="VARCHAR" property="type" />
      <result column="REASON" jdbcType="VARCHAR" property="reason" />
      <result column="GROUP_ID" jdbcType="VARCHAR" property="groupId" />
      <result column="bspID" jdbcType="VARCHAR" property="bspid" />
  </resultMap>

  <resultMap id="BaseResultMap2" type="com.hz.demo.model.base_engage">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 17 17:35:31 CST 2018.
    -->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="JUDGING_ID" jdbcType="VARCHAR" property="judgingId" />
    <result column="SPECIALITY_ID" jdbcType="VARCHAR" property="specialityId" />
    <result column="JURY_DUTY" jdbcType="VARCHAR" property="juryDuty" />
    <result column="AREACODE" jdbcType="VARCHAR" property="areacode" />
    <result column="BEGIN_DATE" jdbcType="TIMESTAMP" property="beginDate" />
    <result column="END_DATE" jdbcType="TIMESTAMP" property="endDate" />
    <result column="ADDTIME" jdbcType="TIMESTAMP" property="addtime" />
    <result column="ADDUSERID" jdbcType="VARCHAR" property="adduserid" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    ID, GROUP_ID, SPECIALITY_ID, BACK1, BACK2, BACK3
  </sql>
  <select id="selectByPrimaryKey" parameterType="Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    select 
    <include refid="Base_Column_List" />
    from BASE_SPECIALITY_GROUP
    where ID = #{id}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    delete from BASE_SPECIALITY_GROUP
    where ID = #{id}
  </delete>
<!--根据条件删除分组-->
  <delete id="deleteWhere" parameterType="pd">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    delete from BASE_SPECIALITY_GROUP
    where GROUP_ID = #{groupId}
    <if test="specialityId!='' and specialityId!=null">
      and SPECIALITY_ID = #{specialityId}
    </if>
  </delete>
  <insert id="insert" parameterType="com.hz.demo.model.speciality_group">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    insert into BASE_SPECIALITY_GROUP (ID, GROUP_ID, SPECIALITY_ID, 
      BACK1, BACK2, BACK3,JUDGING_CODE
      )
    values (SEQ_SPECIALITY_GROUP.nextval, #{GROUP_ID,jdbcType=VARCHAR}, #{SPECIALITY_ID,jdbcType=VARCHAR},
      #{BACK1,jdbcType=VARCHAR}, #{BACK2,jdbcType=VARCHAR}, #{BACK3,jdbcType=VARCHAR},#{JUDGING_CODE,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hz.demo.model.speciality_group">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    insert into BASE_SPECIALITY_GROUP
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="groupId != null">
        GROUP_ID,
      </if>
      <if test="specialityId != null">
        SPECIALITY_ID,
      </if>
      <if test="back1 != null">
        BACK1,
      </if>
      <if test="back2 != null">
        BACK2,
      </if>
      <if test="back3 != null">
        BACK3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="groupId != null">
        #{groupId,jdbcType=VARCHAR},
      </if>
      <if test="specialityId != null">
        #{specialityId,jdbcType=VARCHAR},
      </if>
      <if test="back1 != null">
        #{back1,jdbcType=VARCHAR},
      </if>
      <if test="back2 != null">
        #{back2,jdbcType=VARCHAR},
      </if>
      <if test="back3 != null">
        #{back3,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hz.demo.model.speciality_group">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    update BASE_SPECIALITY_GROUP
    <set>
      <if test="GROUP_ID != null">
        GROUP_ID = #{GROUP_ID,jdbcType=VARCHAR},
      </if>
      <if test="SPECIALITY_ID != null">
        SPECIALITY_ID = #{SPECIALITY_ID,jdbcType=VARCHAR},
      </if>
      <if test="BACK1 != null">
        BACK1 = #{BACK1,jdbcType=VARCHAR},
      </if>
      <if test="BACK2 != null">
        BACK2 = #{BACK2,jdbcType=VARCHAR},
      </if>
      <if test="BACK3 != null">
        BACK3 = #{BACK3,jdbcType=VARCHAR},
      </if>
      <if test="TYPE != null">
        TYPE = #{TYPE,jdbcType=VARCHAR},
      </if>
      <if test="REASON != null">
        REASON = #{REASON,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{ID}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hz.demo.model.speciality_group">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    update BASE_SPECIALITY_GROUP
    set GROUP_ID = #{groupId,jdbcType=VARCHAR},
      SPECIALITY_ID = #{specialityId,jdbcType=VARCHAR},
      BACK1 = #{back1,jdbcType=VARCHAR},
      BACK2 = #{back2,jdbcType=VARCHAR},
      BACK3 = #{back3,jdbcType=VARCHAR}
    where ID = #{id}
  </update>
<!--根据条件查询分组-->
  <select id="getModelWhere"  resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Sep 21 13:53:26 CST 2018.
    -->
    select
    <include refid="Base_Column_List" />
    from BASE_SPECIALITY_GROUP
    where 1 = 1
    <if test="groupId != null and groupId !=''">
      AND GROUP_ID = #{groupId,jdbcType=VARCHAR}
    </if>
    <if test="specialityId != null and specialityId !=''">
      AND SPECIALITY_ID =  #{specialityId,jdbcType=VARCHAR}
    </if>
  </select>

  <!--根据条件查询评委专家分组数据-->
  <select id="getlistPage" resultType="pd" parameterType="page">
      select distinct 	a.id,
      a.JUDGING_CODE,
      a.GROUP_NO,
      a.GROUP_NAME,
      a.YEAR_NO,
      a.PROFESSIAL_ID ,
      t1.PROFESSIAL_NAME,
      (select count(*) from BASE_ENGAGE where JUDGING_CODE=#{pd.JUDGING_CODE}) BACK1,
      (select count(*) from  BASE_SPECIALITY_GROUP where GROUP_ID=a.id) BACK2
      from BASE_SUBJECT_GROUP a
      left join BASE_SPECIALITY_GROUP b on a.id = b.group_id
      left join BASE_PROFESSIAL t1 on a.PROFESSIAL_ID = t1.PROFESSIAL_CODE
      where a.judging_code = #{pd.JUDGING_CODE} and a.YEAR_NO=extract(year from sysdate)
  </select>

  <!--根据条件查询评委专家分组数据  sta=1 查询评委会下所有符合条件的专家 sta = 2 查询当前分组下所有专家-->
  <select id="getSpecialitylistPage" resultType="pd" parameterType="page">
    <if test="pd.sta == 1">
      select b.*,tb1.dict_name as PROFESSIAL_LEVEL_NAME,tb2.dict_name as PROFESSIAL_DUTY_NAME from base_engage a
      inner join base_speciality b
      on a.speciality_id = b.id
      left join sys_dict tb1 on b.PROFESSIAL_LEVEL = tb1.dict_code and tb1.group_name = 'POSITIONAL_TITLES'
      left join sys_dict tb2 on b.PROFESSIAL_DUTY_LEVEL = tb2.dict_code and tb2.group_name = 'TITLE_LEVEL'
      where a.judging_id = #{judgingCode}
      <if test="pd.SPECIALITY_NAME != null and pd.SPECIALITY_NAME !=''">
        and b.SPECIALITY_NAME like '%'||#{pd.SPECIALITY_NAME}||'%'
      </if>
    </if>
    <if test="pd.sta == 2">
      select b.*,a.GROUP_LEADER,a.GROUP_ID,a.id bspID,a.TYPE,a.REASON,tb1.dict_name as PROFESSIAL_LEVEL_NAME,tb2.dict_name as PROFESSIAL_DUTY_NAME,bsg.PROFESSIAL_ID
      from BASE_SPECIALITY_GROUP a INNER join base_speciality b
      on a.speciality_id  = b.id
      left join base_subject_group bsg on bsg.id=a.group_id
      left join sys_dict tb1 on b.PROFESSIAL_LEVEL = tb1.dict_code and tb1.group_name = 'POSITIONAL_TITLES'
      left join sys_dict tb2 on b.PROFESSIAL_DUTY_LEVEL = tb2.dict_code and tb2.group_name = 'TITLE_LEVEL'
      where a.group_id = #{pd.GROUP_ID}
      <if test="pd.SPECIALITY_NAME != null and pd.SPECIALITY_NAME !=''">
        and b.SPECIALITY_NAME like '%'||#{pd.SPECIALITY_NAME}||'%'
      </if>
      and bsg.YEAR_NO=to_char(sysdate,'yyyy')
    </if>
  </select>

  <!--向分组中添加专家-->
  <insert id="insertSpeciality" parameterType="com.hz.demo.model.speciality_group">
      insert
      when (not exists (select 1 from BASE_SPECIALITY_GROUP
      where  group_id = #{groupId,jdbcType=VARCHAR} and speciality_id = #{specialityId,jdbcType=VARCHAR}))
      then
      into BASE_SPECIALITY_GROUP(group_id,speciality_id)
      values(#{groupId,jdbcType=VARCHAR},#{specialityId,jdbcType=VARCHAR}) select * from dual where 1 = 1
  </insert>

  <!--查询学科分组下所有专家数量-->
  <select id="getSpecialityCount" resultType="Integer">
    select  count(distinct speciality_id)
    as listcount from BASE_SPECIALITY_GROUP t1
    inner JOIN base_speciality t2
    ON t1.speciality_id = t2.id
    where t1.group_id = #{groupId}
  </select>

  <!--查询评委会下所有专家数量-->
  <select id="getAllSpecialityCount" resultType="Integer">
    select count(distinct speciality_id)
    as listcount
    from base_engage t1
    INNER JOIN base_speciality t2
    ON t1.speciality_id = t2.id
    where t1.judging_id = #{judgingId}
  </select>
    <!--查询某专业未被评委会聘请的人数-->
    <select id="selectSubjectSpecialityCount" parameterType="pd" resultType="pd">
      SELECT
      COUNT (*) AS listcount
      FROM
      BASE_SERIES_PROFESSIAL bs
      inner JOIN BASE_SPECIALITY bsg on bsg.RECOMMEND_MAJOR=bs.PROFESSIAL_CODE
      WHERE bs.STATE = 1
      <if test="professialId!='' and professialId!=null">
        and bs.PROFESSIAL_CODE in
        <foreach collection="professialId.split(',')" index="index" item="item" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      and bsg.id not in (select SPECIALITY_ID from BASE_SPECIALITY_GROUP where group_id=#{groupId})
      and bsg.state=1
   <!-- select count(*) nums
        from BASE_SPECIALITY bsp
        LEFT JOIN BASE_ENGAGE ben on BEN.SPECIALITY_ID=BSP.id
        where decode(BEN.JUDGING_ID,null,1)=1 and BSP.PROFESSIAL in
      <foreach collection="professialId.split(',')" index="index" item="item" open="(" separator="," close=")">
        #{item}
      </foreach>-->
    </select>

  <!--随机获取评委会下n个专家-->
  <select id="getSpecialityByRandom" resultMap="BaseResultMap2">
    select * from
        (select bsg."ID" speciality_id
            FROM
            BASE_SERIES_PROFESSIAL bs
            inner JOIN BASE_SPECIALITY bsg on bsg.RECOMMEND_MAJOR=bs.PROFESSIAL_CODE
            WHERE  bs.STATE = 1
          <if test="professialId!='' and professialId!=null">
           and  bs.PROFESSIAL_CODE in
            <foreach collection="professialId.split(',')" index="index" item="item" open="(" separator="," close=")">
            #{item}
          </foreach>
          </if>
              and bsg.id not in (select SPECIALITY_ID from BASE_SPECIALITY_GROUP where group_id=#{GROUP_ID})
              and bsg.state=1
              order by dbms_random.value)
     where rownum&lt;= #{specialityCount}
      <!--select * from
     (select speciality_id
       from base_engage t1
         INNER JOIN base_speciality t2
         ON t1.speciality_id = t2.id
         AND t1.judging_id = #{judgingId}
       and t1.speciality_id not in
         (select speciality_id from  base_speciality_group where group_id = #{groupId})
           order by dbms_random.value)
           where rownum&lt;= #{specialityCount}-->
  </select>
    <update id="addEngage" parameterType="pd" >
      <!--insert into BASE_ENGAGE
        (JUDGING_ID,SPECIALITY_ID,JURY_DUTY,ADDUSERID,STATE,BEGIN_DATE) VALUES (
          #{JUDGING_ID},#{SPECIALITY_ID},#{JURY_DUTY},#{ADDUSERID},#{STATE},SYSDATE
        ) -->
        merge into BASE_ENGAGE bsn
        using (select #{JUDGING_ID} JUDGING_ID,#{SPECIALITY_ID} SPECIALITY_ID from dual) bsn2
        on (bsn.JUDGING_ID=bsn2.JUDGING_ID and bsn.SPECIALITY_ID=bsn2.SPECIALITY_ID)
        when matched then
        UPDATE SET bsn.JURY_DUTY=bsn.JURY_DUTY
        WHEN NOT MATCHED THEN
         insert (JUDGING_ID,SPECIALITY_ID,JURY_DUTY,ADDUSERID,STATE,BEGIN_DATE) VALUES (
          #{JUDGING_ID},#{SPECIALITY_ID},#{JURY_DUTY},#{ADDUSERID},#{STATE},SYSDATE
        )
    </update>

    <!--修改之前设置为组长的人员-->
    <update id="updateGroup" parameterType="pd" >
        update BASE_SPECIALITY_GROUP
        set GROUP_LEADER=1
        where GROUP_ID=#{GROUP_ID} and SPECIALITY_ID!=#{id}
    </update>
  <update id="updateGroupTwo" parameterType="pd" >
        update BASE_SPECIALITY_GROUP
        set GROUP_LEADER=0
        where GROUP_ID=#{GROUP_ID} and SPECIALITY_ID=#{id}
    </update>

  <!--获取学科组绑定专业下拉框-->
  <select id="selectProfessial" parameterType="pd" resultType="pd">
      select  * from BASE_SERIES_PROFESSIAL bp
      where  BP.PROFESSIAL_CODE in
    <foreach collection="professialId.split(',')" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>
</mapper>