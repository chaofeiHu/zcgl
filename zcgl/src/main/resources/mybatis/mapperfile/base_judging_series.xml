<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="confing/mappers.base_judging_series">
  <resultMap id="BaseResultMap" type="com.hz.demo.model.base_judging_series">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
        <id column="ID" jdbcType="DECIMAL" property="id" />
        <result column="JUDGING_CODE" jdbcType="VARCHAR" property="judgingCode" />
        <result column="REVIEW_SERIES" jdbcType="VARCHAR" property="reviewSeries" />
        <result column="REVIEW_PROFESSIAL" jdbcType="VARCHAR" property="reviewProfessial" />
        <result column="ADDTIME" jdbcType="TIMESTAMP" property="addtime" />
        <result column="ADDUSERID" jdbcType="VARCHAR" property="adduserid" />
        <result column="BACK1" jdbcType="VARCHAR" property="back1" />
        <result column="BACK2" jdbcType="VARCHAR" property="back2" />
        <result column="BACK3" jdbcType="VARCHAR" property="back3" />
        <result column="JURY_PROFESSION_CODE" jdbcType="VARCHAR" property="juryProfessionCode" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
    ID, JUDGING_CODE, REVIEW_SERIES, REVIEW_PROFESSIAL, ADDTIME, ADDUSERID, BACK1, BACK2, 
    BACK3,JURY_PROFESSION_CODE
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
    select 
    <include refid="Base_Column_List" />
    from BASE_JUDGING_SERIES
    where ID = #{id,jdbcType=DECIMAL}
  </select>

    <!--根据judgingCode 查询系列-->
    <select id="selectByJudgingCode" parameterType="pd" resultMap="BaseResultMap">
        select distinct REVIEW_SERIES from BASE_JUDGING_SERIES
        where JUDGING_CODE = #{judgingCode}
    </select>

    <!--根据评审系列删除数据-->
  <delete id="deleteByReview" parameterType="com.hz.demo.model.base_judging_series">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
    delete from BASE_JUDGING_SERIES
    where REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
      <if test="judgingCode != null and judgingCode!='' ">
          and JUDGING_CODE = #{judgingCode,jdbcType=VARCHAR}
      </if>
  </delete>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu Sep 13 17:01:07 CST 2018.
        -->
        delete from BASE_JUDGING_SERIES
        where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <insert id="insert" parameterType="com.hz.demo.model.base_judging_series">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
    insert into BASE_JUDGING_SERIES (ID, JUDGING_CODE, REVIEW_SERIES, 
      REVIEW_PROFESSIAL, ADDTIME, ADDUSERID, 
      BACK1, BACK2, BACK3,JURY_PROFESSION_CODE
      )
    values (#{id,jdbcType=DECIMAL}, #{judgingCode,jdbcType=VARCHAR}, #{reviewSeries,jdbcType=VARCHAR}, 
      #{reviewProfessial,jdbcType=VARCHAR}, #{addtime,jdbcType=TIMESTAMP}, #{adduserid,jdbcType=VARCHAR}, 
      #{back1,jdbcType=VARCHAR}, #{back2,jdbcType=VARCHAR}, #{back3,jdbcType=VARCHAR},#{juryProfessionCode,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hz.demo.model.base_judging_series">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
    insert into BASE_JUDGING_SERIES
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="judgingCode != null">
        JUDGING_CODE,
      </if>
      <if test="reviewSeries != null">
        REVIEW_SERIES,
      </if>
      <if test="reviewProfessial != null">
        REVIEW_PROFESSIAL,
      </if>
      <if test="addtime != null">
        ADDTIME,
      </if>
      <if test="adduserid != null">
        ADDUSERID,
      </if>
      <if test="back1 != null">
        BACK1,
      </if>
      <if test="back2 != null">
        BACK2,
      </if>
      <if test="back3 != null">
        BACK3,
      </if>
       <if test="juryProfessionCode != null">
           JURY_PROFESSION_CODE,
        </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="judgingCode != null">
        #{judgingCode,jdbcType=VARCHAR},
      </if>
      <if test="reviewSeries != null">
        #{reviewSeries,jdbcType=VARCHAR},
      </if>
      <if test="reviewProfessial != null">
        #{reviewProfessial,jdbcType=VARCHAR},
      </if>
      <if test="addtime != null">
        #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="adduserid != null">
        #{adduserid,jdbcType=VARCHAR},
      </if>
      <if test="back1 != null">
        #{back1,jdbcType=VARCHAR},
      </if>
      <if test="back2 != null">
        #{back2,jdbcType=VARCHAR},
      </if>
      <if test="back3 != null">
        #{back3,jdbcType=VARCHAR},
      </if>
        <if test="juryProfessionCode != null">
            #{juryProfessionCode,jdbcType=VARCHAR},
        </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hz.demo.model.base_judging_series">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
    update BASE_JUDGING_SERIES
    <set>
      <if test="judgingCode != null">
        JUDGING_CODE = #{judgingCode,jdbcType=VARCHAR},
      </if>
      <if test="reviewSeries != null">
        REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR},
      </if>
      <if test="reviewProfessial != null">
        REVIEW_PROFESSIAL = #{reviewProfessial,jdbcType=VARCHAR},
      </if>
      <if test="addtime != null">
        ADDTIME = #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="adduserid != null">
        ADDUSERID = #{adduserid,jdbcType=VARCHAR},
      </if>
      <if test="back1 != null">
        BACK1 = #{back1,jdbcType=VARCHAR},
      </if>
      <if test="back2 != null">
        BACK2 = #{back2,jdbcType=VARCHAR},
      </if>
      <if test="back3 != null">
        BACK3 = #{back3,jdbcType=VARCHAR},
      </if>
        <if test="juryProfessionCode != null">
      JURY_PROFESSION_CODE=#{juryProfessionCode,jdbcType=VARCHAR},
        </if>
    </set>
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hz.demo.model.base_judging_series">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Sep 13 17:01:07 CST 2018.
    -->
    update BASE_JUDGING_SERIES
    set JUDGING_CODE = #{judgingCode,jdbcType=VARCHAR},
      REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR},
      REVIEW_PROFESSIAL = #{reviewProfessial,jdbcType=VARCHAR},
      ADDTIME = #{addtime,jdbcType=TIMESTAMP},
      ADDUSERID = #{adduserid,jdbcType=VARCHAR},
      BACK1 = #{back1,jdbcType=VARCHAR},
      BACK2 = #{back2,jdbcType=VARCHAR},
      BACK3 = #{back3,jdbcType=VARCHAR},
      JURY_PROFESSION_CODE= #{juryProfessionCode,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <!--根据条件查询全部记录-->
  <select id="selectList" parameterType="pd" resultMap="BaseResultMap">
      select
      distinct REVIEW_SERIES
      from (
      select * from base_judging_series WHERE 1=1
      <if test="judgingCode != null and judgingCode!='' ">
     and JUDGING_CODE = #{judgingCode,jdbcType=VARCHAR}
      </if>
    ORDER by addtime)
  </select>
  <!--根据条件查询全部记录个数-->
  <select id="selectCount" parameterType="pd" resultType="Integer">
    select count(*) as listcount
    from base_judging_series WHERE  1=1
      <if test="judgingCode != null and judgingCode!='' ">
          and JUDGING_CODE = #{judgingCode,jdbcType=VARCHAR}
      </if>
      <if test="reviewProfessial!= null and reviewProfessial!='' ">
          and   REVIEW_PROFESSIAL = #{reviewProfessial,jdbcType=VARCHAR}
      </if>
  </select>
  <!--根据条件查询全部记录-->
  <select id="selectMojorList" parameterType="pd" resultMap="BaseResultMap">
   select
    <include refid="Base_Column_List"/>
    from base_judging_series WHERE 1=1
    <if test="reviewSeries!= null and reviewSeries!='' ">
      and REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
    </if>
    <if test="judgingCode != null and judgingCode!='' ">
      and JUDGING_CODE = #{judgingCode,jdbcType=VARCHAR}
    </if>
      <if test="reviewProfessial!= null and reviewProfessial!='' ">
          and   REVIEW_PROFESSIAL = #{reviewProfessial,jdbcType=VARCHAR}
      </if>
    ORDER by JURY_PROFESSION_CODE
  </select>
  <!--根据条件查询全部记录个数-->
  <select id="selectMojorCount" parameterType="pd" resultType="Integer">
    select count(*) as listcount
    from base_judging_series WHERE  1=1
    <if test="judgingCode != null and judgingCode!='' ">
      and JUDGING_CODE = #{judgingCode,jdbcType=VARCHAR}
    </if>
    <if test="reviewSeries!= null and reviewSeries!='' ">
      and REVIEW_SERIES = #{reviewSeries,jdbcType=VARCHAR}
    </if>
  </select>


  <!--根据专家库全部记录-->
  <select id="selectGrouplistPage" parameterType="page" resultType="pd">
      SELECT  BS.SPECIALITY_NAME,  bs.NOWUNIT,   syu.login_name,  sys2.dict_name,
      BS.PROFESSIAL_LEVEL, bs.PERSONAL_NUMBER,bs.id,
      bspr.PROFESSIAL_NAME ,
      tb1.dict_name PROFESSIAL_LEVEL_NAME
      FROM
      BASE_SPECIALITY bs
      LEFT JOIN SYS_USER syu ON syu.user_id = bs.PERSONAL_NUMBER
      LEFT JOIN sys_dict sys2 ON sys2.dict_code = bs.ADMINISTRATIVE_DUTY_LEVEL AND sys2.group_name = 'ADMINISTRATIVE_DUTY_LEVEL'
      LEFT JOIN sys_dict tb1 ON bs.PROFESSIAL_LEVEL = tb1.dict_code  	AND tb1.group_name = 'POSITIONAL_TITLES'
      LEFT JOIN BASE_SERIES_PROFESSIAL bspr on bspr.PROFESSIAL_CODE  =bs.RECOMMEND_MAJOR and bspr.STATE=1
      where bs.STATE=1
      <if test="pd.SPECIALITY_NAME != null and pd.SPECIALITY_NAME != ''">
         and bs.SPECIALITY_NAME like  '%'||#{pd.SPECIALITY_NAME}||'%'
      </if>
      <if test="pd.NOWUNIT != null and pd.NOWUNIT != ''">
          and bs.NOWUNIT like  '%'||#{pd.NOWUNIT}||'%'
      </if>
      <if test="pd.RECOMMEND_MAJOR != null and pd.RECOMMEND_MAJOR != ''">
          and bspr.PROFESSIAL_NAME like  '%'||#{pd.RECOMMEND_MAJOR}||'%'
      </if>
      <if test="pd.NOTJUDGINGID != null and pd.NOTJUDGINGID != ''">
          AND BS.id not in (
          select SPECIALITY_ID from BASE_ENGAGE ben
          where ben.JUDGING_CODE =#{pd.NOTJUDGINGID}  AND ben.STATE = 1
          )
      </if>
      order by
      BS.SPECIALITY_NAME
  </select>

    <!--修改主任/副主任-->
    <update id="UpdateDirector" parameterType="pd">
        merge into BASE_ENGAGE bsn
        using (select #{JUDGING_ID} JUDGING_ID,#{SPECIALITY_ID} SPECIALITY_ID from dual) bsn2
        on (bsn.JUDGING_ID=bsn2.JUDGING_ID and bsn.SPECIALITY_ID=bsn2.SPECIALITY_ID)
        when matched then
          UPDATE SET bsn.JURY_DUTY=#{JURY_DUTY}
        WHEN NOT MATCHED THEN
         insert (JUDGING_ID,SPECIALITY_ID,JURY_DUTY,ADDUSERID,STATE,BEGIN_DATE) VALUES (
          #{JUDGING_ID},#{SPECIALITY_ID},#{JURY_DUTY},#{ADDUSERID},#{STATE},SYSDATE
        )
    </update>

    <update id="UpdateDirectorTwo" parameterType="pd">
        UPDATE BASE_ENGAGE
          SET JURY_DUTY=#{JURY_DUTY}
        where  JUDGING_ID=#{JUDGING_ID} and SPECIALITY_ID!=#{SPECIALITY_ID} and JURY_DUTY=1
    </update>

    <select id="selectReviewSeries" parameterType="pd" resultMap="BaseResultMap">
        SELECT DISTINCT REVIEW_SERIES, judging_code
        FROM base_judging_series WHERE judging_code =
        (select judging_code from base_judging where id = #{judgingId})
    </select>


    <!--学科组手工分配专家列表-->
    <select id="selectManualGrouplistPage" resultType="pd" parameterType="page">
      SELECT
			BS.SPECIALITY_NAME, bs.NOWUNIT, sys2.dict_name, BS.PROFESSIAL_LEVEL, bs.PERSONAL_NUMBER,
			bs.ID,bspr.PROFESSIAL_NAME
	     FROM
			BASE_SPECIALITY bs
			LEFT JOIN sys_dict sys2 ON sys2.dict_code = bs.ADMINISTRATIVE_DUTY_LEVEL 	AND sys2.group_name = 'ADMINISTRATIVE_DUTY_LEVEL'
            LEFT JOIN BASE_SERIES_PROFESSIAL bspr on bspr.PROFESSIAL_CODE  =bs.RECOMMEND_MAJOR and bspr.STATE=1
		 WHERE
			bs.STATE = 1
			AND BS. ID NOT IN ( SELECT SPECIALITY_ID FROM BASE_SPECIALITY_GROUP ben WHERE ben.GROUP_ID =#{pd.GROUP_ID} )
            <if test="pd.SPECIALITY_NAME != null and pd.SPECIALITY_NAME != ''">
                and bs.SPECIALITY_NAME like  '%'||#{pd.SPECIALITY_NAME}||'%'
            </if>
            <if test="pd.NOWUNIT != null and pd.NOWUNIT != ''">
                and bs.NOWUNIT like  '%'||#{pd.NOWUNIT}||'%'
            </if>
            <if test="pd.RECOMMEND_MAJOR != null and pd.RECOMMEND_MAJOR != ''">
                and bspr.PROFESSIAL_NAME like  '%'||#{pd.RECOMMEND_MAJOR}||'%'
            </if>
			ORDER BY BS.SPECIALITY_NAME
    </select>


    <select id="selectJudingCode" parameterType="pd" resultType="String">
    select max(JURY_PROFESSION_CODE) from BASE_JUDGING_SERIES where LENGTH(JURY_PROFESSION_CODE) = #{judgingCodelength} and JURY_PROFESSION_CODE like #{judgingCode}||'%'
    </select>
</mapper>